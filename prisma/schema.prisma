generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String    @id @default(cuid())
    firstName String?
    lastName  String?
    email     String    @unique
    role      Role      @default(USER)
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    notes     Note[]
    password  Password?
}

model Password {
    hash   String
    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Note {
    id        String   @id @default(cuid())
    title     String
    body      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    String
    orderId   String?
    order     Order?   @relation(fields: [orderId], references: [id])
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Address {
    id         String  @id @default(cuid())
    line1      String?
    line2      String?
    line3      String?
    line4      String?
    city       String?
    state      String?
    postalCode String?
    orders     Order[]
}

model UnitOfMeasure {
    name         String        @id
    singular     String        @unique
    abbreviation String        @unique
    measurements Measurement[]
}

model Measurement {
    id                String          @id @default(cuid())
    value             Decimal
    unitOfMeasureName String
    unitOfMeasure     UnitOfMeasure   @relation(fields: [unitOfMeasureName], references: [name])
    VendorProduct     VendorProduct[]
}

model Order {
    id        String      @id @default(uuid())
    addressId String
    createdAt DateTime    @default(now())
    status    OrderStatus @default(DRAFT)
    notes     Note[]
    address   Address     @relation(fields: [addressId], references: [id])
    items     OrderItem[]
}

model OrderItem {
    id        String          @id @default(uuid())
    orderId   String
    productId String
    quantity  Int             @default(1)
    order     Order           @relation(fields: [orderId], references: [id])
    product   RetailerProduct @relation(fields: [productId], references: [id])
}

model RetailerProduct {
    id              String         @id @default(cuid())
    sku             String         @unique
    title           String
    vendorProductId String?        @unique
    orderItems      OrderItem[]
    vendorProduct   VendorProduct? @relation(fields: [vendorProductId], references: [id])
}

model Sample {
    id             String          @id @default(cuid())
    gid            String?         @unique
    materialNo     String          @unique
    seriesName     String
    seriesAlias    String?
    color          String
    colorAlias     String?
    finish         String?
    vendorProducts VendorProduct[]
}

model Vendor {
    id       String          @id @default(cuid())
    name     String          @unique
    products VendorProduct[]
}

model VendorProduct {
    id                   String           @id @default(cuid())
    itemNo               String           @unique
    listPrice            Decimal?
    vendorId             String
    retailerProduct      RetailerProduct?
    vendor               Vendor           @relation(fields: [vendorId], references: [id])
    measurementPerCarton Measurement?     @relation(fields: [measurementId], references: [id])
    measurementId        String?
    color                String?
    description          String?
    finish               String?
    seriesName           String?
    sample               Sample?          @relation(fields: [sampleMaterialNo], references: [materialNo])
    sampleMaterialNo     String?
}

enum OrderStatus {
    DRAFT
    NEW
    PROCESSING
    COMPLETE
    CANCELLED
}

enum Role {
    ADMIN
    SUPERADMIN
    USER
}
